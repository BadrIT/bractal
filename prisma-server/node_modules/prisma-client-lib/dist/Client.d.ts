import { ClientOptions } from './types';
import { GraphQLField, GraphQLSchema } from 'graphql';
import { BatchedGraphQLClient } from 'http-link-dataloader';
import { SubscriptionClient } from 'subscriptions-transport-ws';
export interface InstructionsMap {
    [key: string]: Array<Instruction>;
}
export interface Instruction {
    fieldName: string;
    args?: any;
    field?: GraphQLField<any, any>;
    typeName: string;
    fragment?: string;
}
export declare class Client {
    types: any;
    query: any;
    $subscribe: any;
    $exists: any;
    debug: any;
    mutation: any;
    endpoint: string;
    secret?: string;
    client: BatchedGraphQLClient;
    subscriptionClient: SubscriptionClient;
    schema: GraphQLSchema;
    token: string;
    currentInstructions: InstructionsMap;
    constructor({ typeDefs, endpoint, secret, debug }: ClientOptions);
    getOperation(instructions: any): any;
    processInstructions: (id: number) => Promise<any>;
    mapSubscriptionPayload(result: any, instructions: any): AsyncIterator<any>;
    extractPayload(result: any, instructions: any): any;
    execute(operation: any, document: any, variables: any): Promise<{}>;
    then: (id: any, resolve: any, reject: any) => Promise<any>;
    catch: (id: any, reject: any) => Promise<any>;
    generateSelections(instructions: any): {
        ast: any;
        variables: {};
    };
    buildMethods(): void;
    getTypes(): any;
    getTypeName(type: any): string;
    getDeepType(type: any): any;
    private buildExists;
}
